{
  "generatedAt": "2025-09-10T06:19:46.040Z",
  "files": [
    {
      "path": "arrays/longestSubarray.cpp",
      "name": "longestSubarray.cpp",
      "content": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n\nusing namespace std;\n\nint getLongestSubarray(vector<int> &a, long long k)\n{\n    unordered_map<long long, int> preSumMap;\n    int n = a.size();\n    long long sum = 0;\n    int maxLen = 0;\n\n    for (int i = 0; i < n; i++)\n    {\n        sum += a[i];\n\n        if (sum == k)\n        {\n            maxLen = max(maxLen, i + 1);\n        }\n\n        long long rem = sum - k;\n\n        if (preSumMap.count(rem))\n        {\n            maxLen = max(maxLen, (i - preSumMap[rem]));\n        }\n\n        if (!preSumMap.count(sum))\n        {\n            preSumMap[sum] = i;\n        }\n    }\n    return maxLen;\n}\n\nint main()\n{\n    vector<int> a = {2, 3, 5, 1, 9};\n    long long k = 10;\n    int len = getLongestSubarray(a, k);\n    cout << \"The length of the longest subarray is: \" << len << endl;\n    return 0;\n}"
    },
    {
      "path": "arrays/maxSubarray.cpp",
      "name": "maxSubarray.cpp",
      "content": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n// Maximum Subarray Sum - Kadane's Algorithm\nint maxSubArray(vector<int>& nums) {\n    int maxSum = nums[0];\n    int currentSum = nums[0];\n    \n    for (int i = 1; i < nums.size(); i++) {\n        currentSum = max(nums[i], currentSum + nums[i]);\n        maxSum = max(maxSum, currentSum);\n    }\n    \n    return maxSum;\n}\n\nint main() {\n    vector<int> nums = {-2, 1, -3, 4, -1, 2, 1, -5, 4};\n    \n    int result = maxSubArray(nums);\n    cout << \"Maximum subarray sum: \" << result << endl;\n    \n    return 0;\n}\n"
    },
    {
      "path": "arrays/rotateMatrix.cpp",
      "name": "rotateMatrix.cpp",
      "content": "// LC 48\n\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<vector<int>> bruteForce(vector<vector<int>> &matrix, int m, int n)\n{\n    vector<vector<int>> ans(m, vector<int>(n, 0));\n\n    for (int i = 0; i < m; i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n            int temp = matrix[i][j];\n            ans[j][n - 1 - i] = temp;\n        }\n    }\n    return ans;\n}\n\nvoid optimal(vector<vector<int>> &matrix, int m, int n)\n{\n    for (int i = 0; i < m; i++)\n    {\n        for (int j = i; j < n; j++)\n        {\n\n            swap(matrix[i][j], matrix[j][i]);\n        }\n    }\n\n    for (int i = 0; i < m; i++)\n    {\n        reverse(matrix[i].begin(), matrix[i].end());\n    }\n}\n\nint main()\n{\n    vector<vector<int>> matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    int m = matrix.size();\n    int n = matrix[0].size();\n\n    // Before\n    for (int i = 0; i < m; i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n            cout << matrix[i][j] << \" \";\n        }\n        cout << endl;\n    }\n    cout << endl;\n\n    // vector<vector<int>> ans = bruteForce(matrix, m, n);\n\n    optimal(matrix, m, n);\n\n    // After\n    for (int i = 0; i < m; i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n            cout << matrix[i][j] << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}"
    },
    {
      "path": "arrays/second.cpp",
      "name": "second.cpp",
      "content": "#include <iostream>\n#include <limits.h> // Required for INT_MIN and INT_MAX\n\nusing namespace std;\n\nint secondLargestFn(int arr[], int n)\n{\n    // Handle arrays with less than 2 elements\n    if (n < 2)\n    {\n        return -1; // Or handle as an error\n    }\n    int largest = INT_MIN;\n    int secondLargest = INT_MIN;\n    for (int i = 0; i < n; i++)\n    {\n        if (arr[i] > largest)\n        {\n            secondLargest = largest;\n            largest = arr[i];\n        }\n        // Check if current element is between largest and secondLargest\n        else if (arr[i] > secondLargest && arr[i] != largest)\n        {\n            secondLargest = arr[i];\n        }\n    }\n    return secondLargest;\n}\n\nint secondSmallestFn(int arr[], int n)\n{\n    // Handle arrays with less than 2 elements\n    if (n < 2)\n    {\n        return -1; // Or handle as an error\n    }\n    int smallest = INT_MAX;\n    int secondSmallest = INT_MAX;\n    for (int i = 0; i < n; i++)\n    {\n        if (arr[i] < smallest)\n        {\n            secondSmallest = smallest;\n            smallest = arr[i];\n        }\n        // Check if current element is between smallest and secondSmallest\n        else if (arr[i] < secondSmallest && arr[i] != smallest)\n        {\n            secondSmallest = arr[i];\n        }\n    }\n    return secondSmallest;\n}\n\nint main()\n{\n    int arr[] = {10, 5, 8, 20, 12};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int secondLargest = secondLargestFn(arr, n);   // Should be 12\n    int secondSmallest = secondSmallestFn(arr, n); // Should be 8\n    cout << \"Second Largest: \" << secondLargest << endl;\n    cout << \"Second Smallest: \" << secondSmallest << endl;\n    return 0;\n}"
    },
    {
      "path": "arrays/spiralMatrix.cpp",
      "name": "spiralMatrix.cpp",
      "content": "// LC 54\n\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> spiral(vector<vector<int>> &matrix, int m, int n)\n{\n    vector<int> ans;\n    int top = 0, right = n - 1, bottom = m - 1, left = 0;\n\n    while (top <= bottom && left <= right)\n    {\n        // top: left -> right\n        for (int i = left; i <= right; i++)\n        {\n            ans.push_back(matrix[top][i]);\n        }\n        top++;\n\n        // right: top -> bottom\n        for (int i = top; i <= bottom; i++)\n        {\n            ans.push_back(matrix[i][right]);\n        }\n        right--;\n\n        // bottom: right -> left\n        if (top <= bottom)\n        {\n\n            for (int i = right; i >= left; i--)\n            {\n                ans.push_back(matrix[bottom][i]);\n            }\n            bottom--;\n        }\n\n        // left: bottom -> top\n        if (left <= right)\n        {\n\n            for (int i = bottom; i >= top; i--)\n            {\n                ans.push_back(matrix[i][left]);\n            }\n            left++;\n        }\n    }\n    return ans;\n}\n\nint main()\n{\n    vector<vector<int>> matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    int m = matrix.size();\n    int n = matrix[0].size();\n\n    // Before\n    for (int i = 0; i < m; i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n            cout << matrix[i][j] << \" \";\n        }\n        cout << endl;\n    }\n    cout << endl;\n\n    vector<int> ans = spiral(matrix, m, n);\n\n    // After\n    for (int i = 0; i < ans.size(); i++)\n    {\n        cout << ans[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}"
    },
    {
      "path": "arrays/tempCodeRunnerFile.cpp",
      "name": "tempCodeRunnerFile.cpp",
      "content": " = 0; i <"
    },
    {
      "path": "arrays/twoSum.cpp",
      "name": "twoSum.cpp",
      "content": "#include <iostream>\n#include <vector>\nusing namespace std;\n\n// Two Sum Problem - Find pair with given sum\nvector<int> twoSum(vector<int>& nums, int target) {\n    for (int i = 0; i < nums.size(); i++) {\n        for (int j = i + 1; j < nums.size(); j++) {\n            if (nums[i] + nums[j] == target) {\n                return {i, j};\n            }\n        }\n    }\n    return {};\n}\n\nint main() {\n    vector<int> nums = {2, 7, 11, 15};\n    int target = 9;\n    \n    vector<int> result = twoSum(nums, target);\n    \n    if (!result.empty()) {\n        cout << \"Indices: \" << result[0] << \", \" << result[1] << endl;\n    } else {\n        cout << \"No solution found\" << endl;\n    }\n    \n    return 0;\n}\n"
    },
    {
      "path": "arrays/union.cpp",
      "name": "union.cpp",
      "content": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> unionFn(int arr1[], int arr2[], int n, int m)\n{\n    vector<int> unionArr;\n    int i = 0, j = 0;\n\n    while (i < n && j < m)\n    {\n        if (arr1[i] <= arr2[j])\n        {\n            if (unionArr.size() == 0 || unionArr.back() != arr1[i])\n            {\n                unionArr.push_back(arr1[i]);\n            }\n            i++;\n        }\n        else\n        {\n            if (unionArr.size() == 0 || unionArr.back() != arr2[j])\n            {\n                unionArr.push_back(arr2[j]);\n            }\n            j++;\n        }\n    }\n\n    while (i < n)\n    {\n        if (unionArr.back() != arr1[i])\n        {\n            unionArr.push_back(arr1[i]);\n        }\n        i++;\n    }\n\n    while (j < m)\n    {\n        if (unionArr.back() != arr2[j])\n        {\n            unionArr.push_back(arr2[j]);\n        }\n        j++;\n    }\n\n    return unionArr;\n}\n\nint main()\n{\n    int n = 10, m = 7;\n    int arr1[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    int arr2[] = {2, 3, 4, 4, 5, 11, 12};\n    vector<int> unionArr = unionFn(arr1, arr2, n, m);\n\n    for (auto &val : unionArr)\n    {\n        cout << val << \" \";\n    }\n    cout << endl;\n    return 0;\n}"
    },
    {
      "path": "binarySearch/floorCeil.cpp",
      "name": "floorCeil.cpp",
      "content": "#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n    int arr[] = {3, 4, 4, 7, 8, 10};\n    int n = 6;\n    int x = 8;\n\n    int floor = -1, ceil = -1;\n\n    int start = 0, end = n - 1;\n\n    while (start <= end)\n    {\n        int mid = start + (end - start) / 2;\n\n        if (arr[mid] <= x)\n        {\n            floor = arr[mid];\n            start = mid + 1;\n        }\n        else\n        {\n            end = mid - 1;\n        }\n    }\n\n    start = 0, end = n - 1;\n\n    while (start <= end)\n    {\n        int mid = start + (end - start) / 2;\n\n        if (arr[mid] >= x)\n        {\n            ceil = arr[mid];\n            end = mid - 1;\n        }\n        else\n        {\n            start = mid + 1;\n        }\n    }\n\n    cout << floor << \" \" << ceil << endl;\n}"
    },
    {
      "path": "binarySearch/occurance.cpp",
      "name": "occurance.cpp",
      "content": "#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n    int nums[] = {2, 2, 3, 3, 3, 3, 4};\n    int n = 7;\n    int x = 3;\n\n    int freq = -1;\n\n    int start = 0, end = n - 1;\n    while (start <= end)\n    {\n        int mid = start + (end - start);\n\n        if (nums[mid] == x)\n        {\n            freq++;\n            end = mid - 1;\n        }\n        else if (nums[mid] < x)\n        {\n            start = mid + 1;\n        }\n        else\n        {\n            end = mid - 1;\n        }\n    }\n\n    start = 0, end = n - 1;\n    while (start <= end)\n    {\n        int mid = start + (end - start);\n\n        if (nums[mid] == x)\n        {\n            freq++;\n            start = mid + 1;\n        }\n        else if (nums[mid] < x)\n        {\n            start = mid + 1;\n        }\n        else\n        {\n            end = mid - 1;\n        }\n    }\n    cout << freq << endl;\n    return 0;\n}"
    },
    {
      "path": "binarySearch/upperBound.cpp",
      "name": "upperBound.cpp",
      "content": "#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n    int arr[] = {1, 2, 2, 3};\n    int n = 4;\n    int x = 2;\n    int ans = -1;\n\n    int start = 0, end = n - 1;\n\n    while (start <= end)\n    {\n        int mid = start + (end - start) / 2;\n\n        if (arr[mid] > x)\n        {\n            ans = mid;\n            end = mid - 1;\n        }\n        else\n        {\n            start = mid + 1;\n        }\n    }\n\n    cout << ans << endl;\n\n    return 0;\n}"
    },
    {
      "path": "hashing/mapHashing.cpp",
      "name": "mapHashing.cpp",
      "content": "#include <iostream>\n#include <unordered_map>\n\nusing namespace std;\n\nint main()\n{\n    int n;\n    cin >> n;\n    int arr[n];\n\n    for (int i = 0; i < n; i++)\n    {\n        cin >> arr[i];\n    }\n\n    unordered_map<int, int> mp;\n    for (int i = 0; i < n; i++)\n    {\n        mp[arr[i]]++;\n    }\n\n    for (auto it : mp)\n    {\n        cout << it.first << \" --> \" << it.second << endl;\n    }\n\n    return 0;\n}"
    },
    {
      "path": "maths/reverseNumber.cpp",
      "name": "reverseNumber.cpp",
      "content": "#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n    int s = 4230;\n    int answer = 0;\n    while (s > 0)\n    {\n        int n = s % 10;\n        s /= 10;\n        answer = (answer * 10) + n;\n    }\n    cout << answer << endl;\n    return 0;\n}"
    },
    {
      "path": "oops/containerClass.cpp",
      "name": "containerClass.cpp",
      "content": "#include <iostream>\n\nusing namespace std;\n\nclass Stack\n{\nprivate:\n    int *items;\n    int capacity;\n    int top;\n\npublic:\n    Stack(int size)\n    {\n        items = new int[size];\n        capacity = size;\n        top = -1;\n    }\n\n    ~Stack(){\n        delete[] items;\n    }\n\n    void push(int x)\n    {\n        if (top >= capacity - 1)\n        {\n            cout << \"Stack Overflow\" << endl;\n            return;\n        }\n        items[++top] = x;\n    }\n\n    int pop()\n    {\n        if (top < 0)\n        {\n            cout << \"Stack Underflow\" << endl;\n            return -1;\n        }\n        return items[top--];\n    }\n};\n\nint main()\n{\n    Stack s(5);\n\n    s.push(1);\n    s.push(2);\n    s.push(3);\n    s.push(4);\n    s.push(5);\n\n    cout << s.pop() << endl;\n\n    return 0;\n}"
    },
    {
      "path": "oops/copyConstructor.cpp",
      "name": "copyConstructor.cpp",
      "content": "#include <iostream>\n\nusing namespace std;\n\nclass Vector\n{\nprivate:\n    int *data;\n    int size;\n\npublic:\n    // Constructor\n    Vector(int s)\n    {\n        size = s;\n        data = new int[size];\n        for (int i = 0; i < size; i++)\n        {\n            data[i] = 0;\n        }\n    }\n\n    // Copy constructor\n    Vector(const Vector &source)\n    {\n        size = source.size;\n        data = new int[size];\n        for (int i = 0; i < size; i++)\n        {\n            data[i] = source.data[i];\n        }\n        cout << \"Copy constructor called\" << endl;\n    }\n\n    // Destructor\n    ~Vector()\n    {\n        delete[] data;\n    }\n\n    void setValue(int index, int value)\n    {\n        if (index >= 0 && index < size)\n        {\n            data[index] = value;\n        }\n    }\n\n    void display()\n    {\n        for (int i = 0; i < size; i++)\n        {\n            cout << data[i] << \" \";\n        }\n        cout << endl;\n    }\n};\n\nint main()\n{\n    Vector v1(3);\n    v1.setValue(0, 10);\n    v1.setValue(1, 20);\n    v1.setValue(2, 30);\n\n    Vector v2 = v1; // Copy constructor called\n\n    v1.display(); // Output: 10 20 30\n    v2.display(); // Output: 10 20 30\n\n    return 0;\n}"
    },
    {
      "path": "oops/friendClass.cpp",
      "name": "friendClass.cpp",
      "content": "#include <iostream>\n\nusing namespace std;\n\nclass A\n{\nprivate:\n    int privateData;\n\npublic:\n    A()\n    {\n        privateData = 10;\n    }\n\n    friend class B;\n};\n\nclass B\n{\npublic:\n    void getInto(A a)\n    {\n        cout << a.privateData << endl;\n    }\n};\n\nint main()\n{\n    A a;\n    B b;\n    b.getInto(a);\n    return 0;\n}"
    },
    {
      "path": "oops/friendFunction.cpp",
      "name": "friendFunction.cpp",
      "content": "#include <iostream>\n\nusing namespace std;\n\nclass Box\n{\nprivate:\n    double height, width;\n\npublic:\n    Box(double h, double w)\n    {\n        height = h;\n        width = w;\n    }\n\n    friend double area(Box b);\n};\n\ndouble area(Box b)\n{\n    return b.height * b.width;\n}\n\nint main()\n{\n    Box b(2, 5);\n\n    cout << \"Area: \" << area(b) << endl;\n    return 0;\n}"
    },
    {
      "path": "oops/inheriantance.cpp",
      "name": "inheriantance.cpp",
      "content": "#include <iostream>\n\nusing namespace std;\n\nclass Animal\n{\npublic:\n    void eat()\n    {\n        cout << \"Eating...\" << endl;\n    }\n};\n\n// Single Inheritance\nclass Dog : public Animal\n{\npublic:\n    void bark()\n    {\n        cout << \"Barking\" << endl;\n    }\n};\n\n// Multilevel Inheritance\nclass Bird : public Dog\n{\npublic:\n    void fly()\n    {\n        cout << \"Flying\" << endl;\n    }\n};\n\nint main()\n{\n    Bird tom;\n    return 0;\n}"
    },
    {
      "path": "oops/operatorOverloading.cpp",
      "name": "operatorOverloading.cpp",
      "content": "#include <iostream>\n\nusing namespace std;\n\nclass Complex\n{\nprivate:\n    double real, imag;\n\npublic:\n    Complex(double r = 0, double i = 0)\n    {\n        real = r;\n        imag = i;\n    }\n\n    // Overloading the + operator\n    Complex operator+(const Complex &obj)\n    {\n        Complex result;\n        result.real = real + obj.real;\n        result.imag = imag + obj.imag;\n        return result;\n    }\n\n    void display()\n    {\n        cout << real << \" + \" << imag << \"i\" << endl;\n    }\n};\n\nint main()\n{\n    Complex c1(3, 4), c2(5, 6), c3;\n    c3 = c1 + c2; // c1.operator+(c2)\n    c3.display(); // Output: 8 + 10i\n    return 0;\n}\n"
    },
    {
      "path": "oops/poly.cpp",
      "name": "poly.cpp",
      "content": "#include <iostream>\n\nusing namespace std;\n\nclass Animal\n{\npublic:\n    virtual void makeSound()\n    {\n        cout << \"Animal makes a sound\" << endl;\n    }\n};\n\nclass Dog : public Animal\n{\npublic:\n    void makeSound() override\n    {\n        cout << \"Barking\" << endl;\n    }\n};\n\nclass Cat : public Animal\n{\npublic:\n    void makeSound() override\n    {\n        cout << \"Meow\" << endl;\n    }\n};\n\nint main()\n{\n    Animal *animals[3];\n    animals[0] = new Animal();\n    animals[1] = new Dog();\n    animals[2] = new Cat();\n\n    for (int i = 0; i < 3; i++)\n    {\n        animals[i]->makeSound();\n    }\n    return 0;\n}"
    },
    {
      "path": "patterns/patter13.cpp",
      "name": "patter13.cpp",
      "content": "#include <iostream>\nusing namespace std;\n\nvoid patternPrint(int n)\n{\n    int count = 0;\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 1; j <= i; j++)\n        {\n            count++;\n            cout << count;\n        }\n        cout << endl;\n    }\n}\n\nint main()\n{\n    patternPrint(5);\n    return 0;\n}"
    },
    {
      "path": "patterns/pattern1.cpp",
      "name": "pattern1.cpp",
      "content": "#include <iostream>\nusing namespace std;\n\nvoid patterPrint(int n)\n{\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = 0; j < n; j++)\n        {\n\n            cout << \"*\";\n        }\n        cout << endl;\n    }\n}\n\nint main()\n{\n    patterPrint(5);\n    return 0;\n}"
    },
    {
      "path": "patterns/pattern10.cpp",
      "name": "pattern10.cpp",
      "content": "#include <iostream>\nusing namespace std;\n\nvoid patterPrint(int n)\n{\n    // upper-half\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 1; j <= i; j++)\n        {\n            cout << \"*\";\n        }\n        cout << endl;\n    }\n\n    // lower-half\n    for (int i = n - 1; i >= 1; i--)\n    {\n        for (int j = 1; j <= i; j++)\n        {\n            cout << \"*\";\n        }\n        cout << endl;\n    }\n}\n\nint main()\n{\n    patterPrint(5);\n    return 0;\n}"
    },
    {
      "path": "patterns/pattern11.cpp",
      "name": "pattern11.cpp",
      "content": "#include <iostream>\nusing namespace std;\n\nvoid patternPrint(int n)\n{\n    int count = 0;\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 1; j <= i; j++)\n        {\n            count++;\n            if ((count % 2) == 0)\n            {\n                cout << 0;\n            }\n            else\n            {\n                cout << 1;\n            }\n        }\n        cout << endl;\n    }\n}\n\nint main()\n{\n    patternPrint(5);\n    return 0;\n}"
    },
    {
      "path": "patterns/pattern12.cpp",
      "name": "pattern12.cpp",
      "content": "#include <iostream>\nusing namespace std;\n\nvoid patternPrint(int n){\n    for(int i = 1; i <= n; i++){\n        //number\n        for(int j = 1; j<= i; j++){\n            cout << j;\n        }\n        //spaces\n        for(int j = i; j < n; j++){\n            cout << \" \";\n        }\n        //second spaces\n        for(int j = i; j < n; j++){\n            cout << \" \";\n        }\n        // number\n        for(int j = i; j >= 1; j--){\n            cout << j;\n        }\n        cout << endl;\n    }\n}\n\nint main() {\n    patternPrint(5);\n    return 0;\n}"
    },
    {
      "path": "patterns/pattern14.cpp",
      "name": "pattern14.cpp",
      "content": "#include <iostream>\nusing namespace std;\n\nvoid patternPrint(int n)\n{\n    for (int i = 1; i <= n; i++)\n    {\n        char c = 'A';\n        for (int j = 1; j <= i; j++)\n        {\n            cout << c;\n            c++;\n        }\n        cout << endl;\n    }\n}\n\nint main()\n{\n    patternPrint(5);\n    return 0;\n}"
    },
    {
      "path": "patterns/pattern15.cpp",
      "name": "pattern15.cpp",
      "content": "#include <iostream>\nusing namespace std;\n\nvoid patternPrint(int n)\n{\n    for (int i = n; i >= 1; i--)\n    {\n        char c = 'A';\n        for (int j = 1; j <= i; j++)\n        {\n            cout << c;\n            c++;\n        }\n        cout << endl;\n    }\n}\n\nint main()\n{\n    patternPrint(5);\n    return 0;\n}"
    },
    {
      "path": "patterns/pattern16.cpp",
      "name": "pattern16.cpp",
      "content": "#include <iostream>\nusing namespace std;\n\nvoid patternPrint(int n)\n{\n    char c = 'A';\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 1; j <= i; j++)\n        {\n            cout << c;\n        }\n        cout << endl;\n        c++;\n    }\n}\n\nint main()\n{\n    patternPrint(5);\n    return 0;\n}"
    },
    {
      "path": "patterns/pattern17.cpp",
      "name": "pattern17.cpp",
      "content": "#include <iostream>\nusing namespace std;\n\nvoid patternPrint(int n)\n{\n    for (int i = 1; i <= n; i++)\n    {\n        // spaces\n        for (int j = n; j > i; j--)\n        {\n            cout << \" \";\n        }\n\n        // letter\n        char c1 = 'A';\n        for (int j = 1; j <= i; j++)\n        {\n            cout << c1;\n            c1++;\n        }\n        // second letter\n        char c2 = 'A';\n        for (int j = 1; j < i; j++)\n        {\n            cout << c2;\n            c2++;\n        }\n        cout << endl;\n    }\n}\n\nint main()\n{\n    patternPrint(5);\n    return 0;\n}"
    },
    {
      "path": "patterns/pattern18.cpp",
      "name": "pattern18.cpp",
      "content": "#include <iostream>\nusing namespace std;\n\nvoid patternPrint(int n)\n{\n    char c = 'A';\n    c += n - 1;\n    for (int i = 1; i <= n; i++)\n    {\n        char d = c;\n        for (int j = 1; j <= i; j++)\n        {\n            cout << d;\n            d++;\n        }\n        c--;\n        cout << endl;\n    }\n}\n\nint main()\n{\n    patternPrint(5);\n    return 0;\n}"
    },
    {
      "path": "patterns/pattern19.cpp",
      "name": "pattern19.cpp",
      "content": "#include <iostream>\nusing namespace std;\n\nvoid patterPrint(int n)\n{\n    // upper-half\n    for (int i = 1; i <= n; i++)\n    {\n        // first-star\n        for (int j = i; j <= n; j++)\n        {\n            cout << \"*\";\n        }\n        // space\n        for (int j = 1; j < i; j++)\n        {\n            cout << \" \";\n        }\n        // second-space\n        for (int j = 1; j < i; j++)\n        {\n            cout << \" \";\n        }\n        // second-start\n        for (int j = i; j <= n; j++)\n        {\n            cout << \"*\";\n        }\n        cout << endl;\n    }\n    // lower-half\n    for (int i = n; i >= 1; i--)\n    {\n        // first-star\n        for (int j = i; j <= n; j++)\n        {\n            cout << \"*\";\n        }\n        // space\n        for (int j = 1; j < i; j++)\n        {\n            cout << \" \";\n        }\n        // second-space\n        for (int j = 1; j < i; j++)\n        {\n            cout << \" \";\n        }\n        // second-start\n        for (int j = i; j <= n; j++)\n        {\n            cout << \"*\";\n        }\n        cout << endl;\n    }\n}\n\nint main()\n{\n    patterPrint(5);\n    return 0;\n}"
    },
    {
      "path": "patterns/pattern2.cpp",
      "name": "pattern2.cpp",
      "content": "#include <iostream>\nusing namespace std;\n\nvoid patterPrint(int n)\n{\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 1; j <= i; j++)\n        {\n\n            cout << \"*\";\n        }\n        cout << endl;\n    }\n}\n\nint main()\n{\n    patterPrint(5);\n    return 0;\n}"
    },
    {
      "path": "patterns/pattern20.cpp",
      "name": "pattern20.cpp",
      "content": "#include <iostream>\nusing namespace std;\n\nvoid patternPrint(int n)\n{\n    // upper-half\n    for (int i = 1; i <= n; i++)\n    {\n        // first-star\n        for (int j = 1; j <= i; j++)\n        {\n            cout << \"*\";\n        }\n        // first-space\n        for (int j = n; j > i; j--)\n        {\n            cout << \" \";\n        }\n        // second-space\n        for (int j = n; j > i; j--)\n        {\n            cout << \" \";\n        }\n        // second-star\n        for (int j = 1; j <= i; j++)\n        {\n            cout << \"*\";\n        }\n        cout << endl;\n    }\n\n    // lower-half\n    for (int i = n; i >= 1; i--)\n    {\n        // first-star\n        for (int j = 1; j <= i; j++)\n        {\n            cout << \"*\";\n        }\n        // first-space\n        for (int j = n; j > i; j--)\n        {\n            cout << \" \";\n        }\n        // second-space\n        for (int j = n; j > i; j--)\n        {\n            cout << \" \";\n        }\n        // second-star\n        for (int j = 1; j <= i; j++)\n        {\n            cout << \"*\";\n        }\n        cout << endl;\n    }\n}\n\nint main()\n{\n    patternPrint(5);\n    return 0;\n}"
    },
    {
      "path": "patterns/pattern21.cpp",
      "name": "pattern21.cpp",
      "content": "#include <iostream>\nusing namespace std;\n\nvoid patternPrint(int n)\n{\n    for (int i = 1; i <= n; i++)\n    {\n        if (i == 1 || i == n)\n        {\n            for (int j = 1; j <= n; j++)\n            {\n                cout << \"*\";\n            }\n        }\n        else\n        {\n            // first-star\n            cout << \"*\";\n            // spaces\n            for (int j = 1; j < n - 1; j++)\n            {\n                cout << \" \";\n            }\n            // second-star\n            cout << \"*\";\n        }\n        cout << endl;\n    }\n}\n\nint main()\n{\n    patternPrint(5);\n    return 0;\n}"
    },
    {
      "path": "patterns/pattern3.cpp",
      "name": "pattern3.cpp",
      "content": "#include <iostream>\nusing namespace std;\n\nvoid patterPrint(int n)\n{\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 1; j <= i; j++)\n        {\n            cout << j;\n        }\n        cout << endl;\n    }\n}\n\nint main()\n{\n    patterPrint(5);\n    return 0;\n}"
    },
    {
      "path": "patterns/pattern4.cpp",
      "name": "pattern4.cpp",
      "content": "#include <iostream>\nusing namespace std;\n\nvoid patterPrint(int n)\n{\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 1; j <= i; j++)\n        {\n            cout << i;\n        }\n        cout << endl;\n    }\n}\n\nint main()\n{\n    patterPrint(5);\n    return 0;\n}"
    },
    {
      "path": "patterns/pattern5.cpp",
      "name": "pattern5.cpp",
      "content": "#include <iostream>\nusing namespace std;\n\nvoid patternPrint(int n)\n{\n    for (int i = n; i >= 1; i--)\n    {\n        for (int j = i; j >= 1; j--)\n        {\n            cout << \"*\";\n        }\n        cout << endl;\n    }\n}\n\nint main()\n{\n    patternPrint(5);\n    return 0;\n}"
    },
    {
      "path": "patterns/pattern6.cpp",
      "name": "pattern6.cpp",
      "content": "#include <iostream>\nusing namespace std;\n\nvoid patternPrint(int n)\n{\n    for (int i = n; i >= 1; i--)\n    {\n        for (int j = 1; j <= i; j++)\n        {\n            cout << j;\n        }\n        cout << endl;\n    }\n}\n\nint main()\n{\n    patternPrint(5);\n    return 0;\n}"
    },
    {
      "path": "patterns/pattern7.cpp",
      "name": "pattern7.cpp",
      "content": "#include <iostream>\nusing namespace std;\n\nvoid patternPrint(int n)\n{\n    for (int i = 1; i <= n; i++)\n    {\n        // Spaces\n        for (int j = (n-1); j >= i; j--)\n        {\n            cout << \" \";\n        }\n\n        // Star\n        for (int j = 1; j <= (2 * i - 1); j++)\n        {\n            cout << \"*\";\n        }\n        cout << endl;\n    }\n}\n\nint main()\n{\n    patternPrint(5);\n    return 0;\n}"
    },
    {
      "path": "patterns/pattern8.cpp",
      "name": "pattern8.cpp",
      "content": "#include <iostream>\nusing namespace std;\n\nvoid patternPrint(int n)\n{\n    for (int i = n; i >= 1; i--)\n    {\n        // spaces\n        for (int j = (n - 1); j >= i; j--)\n        {\n            cout << \" \";\n        }\n\n        // star\n        for (int j = 1; j <= (2 * i - 1); j++)\n        {\n            cout << \"*\";\n        }\n        cout << endl;\n    }\n}\n\nint main()\n{\n    patternPrint(5);\n    return 0;\n}"
    },
    {
      "path": "patterns/pattern9.cpp",
      "name": "pattern9.cpp",
      "content": "#include <iostream>\nusing namespace std;\n\nvoid patternPrint(int n)\n{\n    // upper-half\n    for (int i = 1; i <= n; i++)\n    {\n        // spaces\n        for (int j = (n - 1); j >= i; j--)\n        {\n            cout << \" \";\n        }\n\n        // star\n        for (int j = 1; j <= (2 * i - 1); j++)\n        {\n            cout << \"*\";\n        }\n        cout << endl;\n    }\n\n    // lower-half\n    for (int i = n; i >= 1; i--)\n    {\n        // spaces\n        for (int j = (n - 1); j >= i; j--)\n        {\n            cout << \" \";\n        }\n\n        // star\n        for (int j = 1; j <= (2 * i - 1); j++)\n        {\n            cout << \"*\";\n        }\n        cout << endl;\n    }\n}\n\nint main()\n{\n    patternPrint(5);\n    return 0;\n}"
    },
    {
      "path": "referenceClass.cpp",
      "name": "referenceClass.cpp",
      "content": "#include <iostream>\n\nusing namespace std;\n\nvoid passByReference(int &a, int &b, int &c)\n{\n    a = b + c;\n    cout << a << endl;\n}\n\nvoid passByValue(int a, int b, int c)\n{\n    a = b + c;\n    cout << a << endl;\n}\n\nint main()\n{\n    int a = 2;\n    int b = 3;\n    int c = 5;\n\n    // passByReference(a, b, c);\n\n    passByValue(a, b, c);\n\n    cout << a << endl;\n\n    return 0;\n}"
    },
    {
      "path": "searching/binearySearch.cpp",
      "name": "binearySearch.cpp",
      "content": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvoid search(vector<int> &arr, int target, int start, int end)\n{\n    int mid = start + (end - start) / 2;\n\n    if (arr[mid] == target)\n    {\n        cout << mid << endl;\n    }\n    else if (arr[mid] > target)\n    {\n        search(arr, target, start, mid - 1);\n    }\n    else\n    {\n        search(arr, target, mid + 1, end);\n    }\n}\n\nint main()\n{\n    vector<int> arr = {1, 2, 3, 4, 5, 6};\n    int target = 5;\n    int n = arr.size();\n\n    search(arr, target, 0, n - 1);\n    return 0;\n}"
    },
    {
      "path": "sorting/bubbleSort.cpp",
      "name": "bubbleSort.cpp",
      "content": "#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n    int N = 6;\n    int arr[] = {13, 46, 24, 52, 20, 9};\n    for (int i = N - 1; i > 0; i--)\n    {\n        bool flag = false;\n        for (int j = 0; j < i; j++)\n        {\n            if (arr[j] > arr[j + 1])\n            {\n                swap(arr[j], arr[j + 1]);\n                flag = true;\n            }\n        }\n        if (!flag)\n        {\n            break;\n        }\n    }\n    for (int i = 0; i < N; i++)\n    {\n        cout << arr[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}"
    },
    {
      "path": "sorting/insertionSort.cpp",
      "name": "insertionSort.cpp",
      "content": "#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n    int n = 6;\n    int arr[] = {13, 46, 24, 52, 20, 9};\n\n    for (int i = 1; i < n; i++)\n    {\n        int j = i;\n        while (j > 0 && arr[j - 1] > arr[j])\n        {\n            swap(arr[j - 1], arr[j]);\n            j--;\n        }\n    }\n\n    for (int i = 0; i < n; i++)\n    {\n        cout << arr[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}"
    },
    {
      "path": "sorting/mergeSort.cpp",
      "name": "mergeSort.cpp",
      "content": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvoid merge(vector<int> &arr, int start, int mid, int end)\n{\n    vector<int> temp;\n    int i = start, j = mid + 1;\n\n    while (i <= mid && j <= end)\n    {\n        if (arr[i] <= arr[j])\n        {\n            temp.push_back(arr[i]);\n            i++;\n        }\n        else\n        {\n            temp.push_back(arr[j]);\n            j++;\n        }\n    }\n\n    while (i <= mid)\n    {\n        temp.push_back(arr[i]);\n        i++;\n    }\n\n    while (j <= end)\n    {\n        temp.push_back(arr[j]);\n        j++;\n    }\n\n    for(int k = start; k <= end; k++){\n        arr[k] = temp[k - start];\n    }\n}\n\nvoid divide(vector<int> &arr, int start, int end)\n{\n    if (start >= end)\n        return;\n\n    int mid = start + (end - start) / 2;\n\n    divide(arr, start, mid);\n\n    divide(arr, mid + 1, end);\n\n    merge(arr, start, mid, end);\n}\n\nint main()\n{\n    vector<int> arr = {7, 3, 2, 6, 0, 1, 5, 4};\n\n    divide(arr, 0, arr.size() - 1);\n\n    for (int n : arr)\n    {\n        cout << n << \" \";\n    }\n    cout << endl;\n}"
    },
    {
      "path": "sorting/quickSort.cpp",
      "name": "quickSort.cpp",
      "content": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvoid qs(vector<int>& a, int start, int end){\n    \n}\n\nint main()\n{\n    vector<int> a = {4, 6, 2, 5, 7, 9, 1, 3};\n\n    qs(a, 0, a.size() - 1);\n\n    for (int i : a)\n    {\n        cout << i << \" \";\n    }\n    cout << endl;\n    return 0;\n}"
    },
    {
      "path": "sorting/recursiveBubbleSort.cpp",
      "name": "recursiveBubbleSort.cpp",
      "content": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvoid sort(vector<int> &a, int n)\n{\n    if (n == 1)\n        return;\n\n    bool didSwap = false;\n\n    for (int i = 0; i < n - 1; i++)\n    {\n        if (a[i] > a[i + 1])\n        {\n            swap(a[i], a[i + 1]);\n            didSwap = true;\n        }\n    }\n\n    if (!didSwap)\n        return;\n\n    sort(a, n - 1);\n}\n\nint main()\n{\n    vector<int> a = {7, 3, 2, 1, 6, 5, 4};\n    int n = a.size();\n\n    sort(a, n);\n\n    for (int i : a)\n    {\n        cout << i << \" \";\n    }\n    cout << endl;\n    return 0;\n}"
    },
    {
      "path": "sorting/recursiveInsertionSort.cpp",
      "name": "recursiveInsertionSort.cpp",
      "content": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvoid sort(vector<int> &a, int n, int i)\n{\n\n    if (i > n)\n        return;\n\n    int j = i;\n\n    while (j > 0 && a[j - 1] > a[j])\n    {\n        swap(a[j - 1], a[j]);\n        j--;\n    }\n\n    sort(a, n, i + 1);\n}\n\nint main()\n{\n    vector<int> a = {13, 46, 24, 52, 20, 9};\n    int n = a.size();\n\n    sort(a, n - 1, 1);\n\n    for (int i : a)\n    {\n        cout << i << \" \";\n    }\n    cout << endl;\n    return 0;\n}"
    },
    {
      "path": "sorting/selectionSort.cpp",
      "name": "selectionSort.cpp",
      "content": "#include <iostream>\n\nusing namespace std;\n\nint main()\n{\n    int n = 6;\n    int arr[] = {13, 46, 24, 52, 20, 9};\n    for (int i = 0; i < n - 1; i++)\n    {\n        int minIdx = i;\n        for (int j = i + 1; j < n; j++)\n        {\n            if (arr[j] < arr[minIdx])\n            {\n                minIdx = j;\n            }\n        }\n        swap(arr[minIdx], arr[i]);\n    }\n\n    for (int i = 0; i < n; i++)\n    {\n        cout << arr[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}"
    },
    {
      "path": "stl/unorderedSet.cpp",
      "name": "unorderedSet.cpp",
      "content": "#include<iostream>\n#include<unordered_set>\n\nusing namespace std;\n\nint main() {\n  unordered_set < int > s;\n  for (int i = 1; i <= 10; i++) {\n    s.insert(i);\n  }\n\n  cout << \"Elements present in the unordered set: \";\n  for (auto it = s.begin(); it != s.end(); it++) {\n    cout << * it << \" \";\n  }\n  cout << endl;\n  int n = 2;\n  if (s.find(2) != s.end())\n    cout << n << \" is present in unordered set\" << endl;\n\n  s.erase(s.begin());\n  cout << \"Elements after deleting the first element: \";\n  for (auto it = s.begin(); it != s.end(); it++) {\n    cout << * it << \" \";\n  }\n  cout << endl;\n\n  cout << \"The size of the unordered set is: \" << s.size() << endl;\n\n  if (s.empty() == false)\n    cout << \"The unordered set is not empty \" << endl;\n  else\n    cout << \"The unordered set is empty\" << endl;\n  s.clear();\n  cout << \"Size of the unordered set after clearing all the elements: \" << s.size();\n}"
    },
    {
      "path": "stl/vector.cpp",
      "name": "vector.cpp",
      "content": "#include<iostream>\n#include<vector>\n\nusing namespace std;\n\nint main() {\n  vector < int > v;\n\n  for (int i = 0; i < 10; i++) {\n    v.push_back(i); //inserting elements in the vector\n  }\n\n  cout << \"the elements in the vector: \";\n  for (auto it = v.begin(); it != v.end(); it++)\n    cout << * it << \" \";\n\n  cout << \"\\nThe front element of the vector: \" << v.front();\n  cout << \"\\nThe last element of the vector: \" << v.back();\n  cout << \"\\nThe size of the vector: \" << v.size();\n  cout << \"\\nDeleting element from the end: \" << v[v.size() - 1];\n  v.pop_back();\n\n  cout << \"\\nPrinting the vector after removing the last element:\" << endl;\n  for (int i = 0; i < v.size(); i++)\n    cout << v[i] << \" \";\n\n  cout << \"\\nInserting 5 at the beginning:\" << endl;\n  v.insert(v.begin(), 5);\n  cout << \"The first element is: \" << v[0] << endl;\n  cout << \"Erasing the first element\" << endl;\n  v.erase(v.begin());\n  cout << \"Now the first element is: \" << v[0] << endl;\n\n  if (v.empty())\n    cout << \"\\nvector is empty\";\n  else\n    cout << \"\\nvector is not empty\" << endl;\n\n  v.clear();\n  cout << \"Size of the vector after clearing the vector: \" << v.size();\n\n}"
    },
    {
      "path": "validPailondrame.cpp",
      "name": "validPailondrame.cpp",
      "content": "#include <iostream>\n\nusing namespace std;\n\nbool isAlphanumeric(char c)\n{\n    if (c >= 0 && c <= 9)\n        return true;\n    if (c >= 'A' && c <= 'Z')\n        return true;\n    if (c >= 'a' && c <= 'z')\n        return true;\n}\n\nchar lower(char c)\n{\n    if (c >= 'A' && c <= 'Z')\n        return c - 'A' + 'a';\n    return c;\n}\n\nint main()\n{\n    // cout << isAlphanumeric(',') << endl;\n    cout << lower(',') << endl;\n\n    return 0;\n}"
    }
  ],
  "tree": {
    "name": "",
    "type": "folder",
    "children": {
      "arrays": {
        "name": "arrays",
        "type": "folder",
        "children": {
          "longestSubarray.cpp": {
            "name": "longestSubarray.cpp",
            "type": "file",
            "path": "arrays/longestSubarray.cpp"
          },
          "maxSubarray.cpp": {
            "name": "maxSubarray.cpp",
            "type": "file",
            "path": "arrays/maxSubarray.cpp"
          },
          "rotateMatrix.cpp": {
            "name": "rotateMatrix.cpp",
            "type": "file",
            "path": "arrays/rotateMatrix.cpp"
          },
          "second.cpp": {
            "name": "second.cpp",
            "type": "file",
            "path": "arrays/second.cpp"
          },
          "spiralMatrix.cpp": {
            "name": "spiralMatrix.cpp",
            "type": "file",
            "path": "arrays/spiralMatrix.cpp"
          },
          "tempCodeRunnerFile.cpp": {
            "name": "tempCodeRunnerFile.cpp",
            "type": "file",
            "path": "arrays/tempCodeRunnerFile.cpp"
          },
          "twoSum.cpp": {
            "name": "twoSum.cpp",
            "type": "file",
            "path": "arrays/twoSum.cpp"
          },
          "union.cpp": {
            "name": "union.cpp",
            "type": "file",
            "path": "arrays/union.cpp"
          }
        }
      },
      "binarySearch": {
        "name": "binarySearch",
        "type": "folder",
        "children": {
          "floorCeil.cpp": {
            "name": "floorCeil.cpp",
            "type": "file",
            "path": "binarySearch/floorCeil.cpp"
          },
          "occurance.cpp": {
            "name": "occurance.cpp",
            "type": "file",
            "path": "binarySearch/occurance.cpp"
          },
          "upperBound.cpp": {
            "name": "upperBound.cpp",
            "type": "file",
            "path": "binarySearch/upperBound.cpp"
          }
        }
      },
      "hashing": {
        "name": "hashing",
        "type": "folder",
        "children": {
          "mapHashing.cpp": {
            "name": "mapHashing.cpp",
            "type": "file",
            "path": "hashing/mapHashing.cpp"
          }
        }
      },
      "maths": {
        "name": "maths",
        "type": "folder",
        "children": {
          "reverseNumber.cpp": {
            "name": "reverseNumber.cpp",
            "type": "file",
            "path": "maths/reverseNumber.cpp"
          }
        }
      },
      "oops": {
        "name": "oops",
        "type": "folder",
        "children": {
          "containerClass.cpp": {
            "name": "containerClass.cpp",
            "type": "file",
            "path": "oops/containerClass.cpp"
          },
          "copyConstructor.cpp": {
            "name": "copyConstructor.cpp",
            "type": "file",
            "path": "oops/copyConstructor.cpp"
          },
          "friendClass.cpp": {
            "name": "friendClass.cpp",
            "type": "file",
            "path": "oops/friendClass.cpp"
          },
          "friendFunction.cpp": {
            "name": "friendFunction.cpp",
            "type": "file",
            "path": "oops/friendFunction.cpp"
          },
          "inheriantance.cpp": {
            "name": "inheriantance.cpp",
            "type": "file",
            "path": "oops/inheriantance.cpp"
          },
          "operatorOverloading.cpp": {
            "name": "operatorOverloading.cpp",
            "type": "file",
            "path": "oops/operatorOverloading.cpp"
          },
          "poly.cpp": {
            "name": "poly.cpp",
            "type": "file",
            "path": "oops/poly.cpp"
          }
        }
      },
      "patterns": {
        "name": "patterns",
        "type": "folder",
        "children": {
          "patter13.cpp": {
            "name": "patter13.cpp",
            "type": "file",
            "path": "patterns/patter13.cpp"
          },
          "pattern1.cpp": {
            "name": "pattern1.cpp",
            "type": "file",
            "path": "patterns/pattern1.cpp"
          },
          "pattern10.cpp": {
            "name": "pattern10.cpp",
            "type": "file",
            "path": "patterns/pattern10.cpp"
          },
          "pattern11.cpp": {
            "name": "pattern11.cpp",
            "type": "file",
            "path": "patterns/pattern11.cpp"
          },
          "pattern12.cpp": {
            "name": "pattern12.cpp",
            "type": "file",
            "path": "patterns/pattern12.cpp"
          },
          "pattern14.cpp": {
            "name": "pattern14.cpp",
            "type": "file",
            "path": "patterns/pattern14.cpp"
          },
          "pattern15.cpp": {
            "name": "pattern15.cpp",
            "type": "file",
            "path": "patterns/pattern15.cpp"
          },
          "pattern16.cpp": {
            "name": "pattern16.cpp",
            "type": "file",
            "path": "patterns/pattern16.cpp"
          },
          "pattern17.cpp": {
            "name": "pattern17.cpp",
            "type": "file",
            "path": "patterns/pattern17.cpp"
          },
          "pattern18.cpp": {
            "name": "pattern18.cpp",
            "type": "file",
            "path": "patterns/pattern18.cpp"
          },
          "pattern19.cpp": {
            "name": "pattern19.cpp",
            "type": "file",
            "path": "patterns/pattern19.cpp"
          },
          "pattern2.cpp": {
            "name": "pattern2.cpp",
            "type": "file",
            "path": "patterns/pattern2.cpp"
          },
          "pattern20.cpp": {
            "name": "pattern20.cpp",
            "type": "file",
            "path": "patterns/pattern20.cpp"
          },
          "pattern21.cpp": {
            "name": "pattern21.cpp",
            "type": "file",
            "path": "patterns/pattern21.cpp"
          },
          "pattern3.cpp": {
            "name": "pattern3.cpp",
            "type": "file",
            "path": "patterns/pattern3.cpp"
          },
          "pattern4.cpp": {
            "name": "pattern4.cpp",
            "type": "file",
            "path": "patterns/pattern4.cpp"
          },
          "pattern5.cpp": {
            "name": "pattern5.cpp",
            "type": "file",
            "path": "patterns/pattern5.cpp"
          },
          "pattern6.cpp": {
            "name": "pattern6.cpp",
            "type": "file",
            "path": "patterns/pattern6.cpp"
          },
          "pattern7.cpp": {
            "name": "pattern7.cpp",
            "type": "file",
            "path": "patterns/pattern7.cpp"
          },
          "pattern8.cpp": {
            "name": "pattern8.cpp",
            "type": "file",
            "path": "patterns/pattern8.cpp"
          },
          "pattern9.cpp": {
            "name": "pattern9.cpp",
            "type": "file",
            "path": "patterns/pattern9.cpp"
          }
        }
      },
      "referenceClass.cpp": {
        "name": "referenceClass.cpp",
        "type": "file",
        "path": "referenceClass.cpp"
      },
      "searching": {
        "name": "searching",
        "type": "folder",
        "children": {
          "binearySearch.cpp": {
            "name": "binearySearch.cpp",
            "type": "file",
            "path": "searching/binearySearch.cpp"
          }
        }
      },
      "sorting": {
        "name": "sorting",
        "type": "folder",
        "children": {
          "bubbleSort.cpp": {
            "name": "bubbleSort.cpp",
            "type": "file",
            "path": "sorting/bubbleSort.cpp"
          },
          "insertionSort.cpp": {
            "name": "insertionSort.cpp",
            "type": "file",
            "path": "sorting/insertionSort.cpp"
          },
          "mergeSort.cpp": {
            "name": "mergeSort.cpp",
            "type": "file",
            "path": "sorting/mergeSort.cpp"
          },
          "quickSort.cpp": {
            "name": "quickSort.cpp",
            "type": "file",
            "path": "sorting/quickSort.cpp"
          },
          "recursiveBubbleSort.cpp": {
            "name": "recursiveBubbleSort.cpp",
            "type": "file",
            "path": "sorting/recursiveBubbleSort.cpp"
          },
          "recursiveInsertionSort.cpp": {
            "name": "recursiveInsertionSort.cpp",
            "type": "file",
            "path": "sorting/recursiveInsertionSort.cpp"
          },
          "selectionSort.cpp": {
            "name": "selectionSort.cpp",
            "type": "file",
            "path": "sorting/selectionSort.cpp"
          }
        }
      },
      "stl": {
        "name": "stl",
        "type": "folder",
        "children": {
          "unorderedSet.cpp": {
            "name": "unorderedSet.cpp",
            "type": "file",
            "path": "stl/unorderedSet.cpp"
          },
          "vector.cpp": {
            "name": "vector.cpp",
            "type": "file",
            "path": "stl/vector.cpp"
          }
        }
      },
      "validPailondrame.cpp": {
        "name": "validPailondrame.cpp",
        "type": "file",
        "path": "validPailondrame.cpp"
      }
    }
  }
}